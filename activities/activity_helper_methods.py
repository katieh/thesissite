## Author:  Katie Hanss
## Class:   Senior Thesis
## Description: This file contains methods that help 
## manipulate activities.

## ------------------------------------------------------------ ##
## input:    an fitparse_activity generated by fitparse
## outputs:  a dictionary where keys are fields ('distance', 
##           'timestamp' etc.) and values are a list 
## ------------------------------------------------------------ ##
def get_dict_of_fields(fitparse_activity):

    ## get unique fields in the fitparse_activity
    fields = {field for record in fitparse_activity.get_records_as_dicts('record') for field in record.keys()}

    ## make a dictionary of fields
    activity_dict = dict()
    for field in fields:
        activity_dict[field] = []

    ## fill in dictionary with appropriate fields
    for record in fitparse_activity.get_records_as_dicts('record'):
        for field in fields:

            ## if field in this record append
            if field in record:
                activity_dict[field].append(record[field])

            ## else append None
            else:
                activity_dict[field].append(None)

    return activity_dict

## return the key associated with a field (for graphing)
def get_key(arg):

    if arg == "distance":
        return "Distance"
    elif arg == "altitude":
        return "Altitude"
    elif arg == "speed":
        return "Speed"
    elif arg == "heart_rate":
        return "Heart Rate"
    elif arg == "cadence":
        return "Cadence"
    else:
        raise ValueError("This type does not have a graphable key!")

## return the associated color (for graphing)
def get_color(arg):

    if arg == "altitude":
        return '#00aedb'
    elif arg == "speed":
        return '#00b159'
    elif arg == "heart_rate":
        return '#d11141'
    elif arg == "cadence":
        return '#f37735'
    else:
        raise ValueError("This type does not have a graphable color!")